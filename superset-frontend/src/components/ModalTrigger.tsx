/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import React, { MouseEventHandler, useState } from 'react';
import { Modal, MenuItem, Sizes } from 'react-bootstrap';
import cx from 'classnames';

import Button from './Button';

interface IModalTriggerProps {
  dialogClassName?: string;
  animation?: boolean;
  triggerNode: React.ReactNode;
  modalTitle?: React.ReactNode;
  modalBody?: React.ReactNode; // not required because it can be generated by beforeOpen
  modalFooter?: React.ReactNode;
  showModal?: boolean;
  beforeOpen?: () => void;
  beforeClose?: () => void;
  onExit?: () => void;
  isButton?: boolean;
  isMenuItem?: boolean;
  bsSize?: Sizes;
  className?: string;
  tooltip?: string;
  backdrop?: 'static' | boolean;
  customClass?: string;
}

const ModalTrigger = React.forwardRef<any, IModalTriggerProps>(({
  dialogClassName,
  animation,
  triggerNode,
  modalTitle,
  modalBody,
  modalFooter,
  showModal,
  beforeOpen,
  beforeClose,
  onExit,
  isButton,
  isMenuItem,
  bsSize,
  className,
  tooltip,
  backdrop,
  customClass,
}, ref) => {
  const [internalShowModal, setInternalShowModal] = useState(false);
  const actualShowModal = showModal ?? internalShowModal;

  const close = () => {
    beforeClose?.();
    setInternalShowModal(false)
  };

  const open: MouseEventHandler = (event) =>  {
    event !== undefined ? event.preventDefault() : 0;
    beforeOpen?.();
    setInternalShowModal(true);
  }

  const renderModal = (
    <Modal
      dialogClassName={dialogClassName}
      animation={animation}
      show={actualShowModal}
      onHide={close}
      onExit={onExit}
      bsSize={bsSize}
      className={className}
      backdrop={backdrop}
    >
      {modalTitle && (
        <Modal.Header closeButton>
          <Modal.Title>{modalTitle}</Modal.Title>
        </Modal.Header>
      )}
      <Modal.Body>{modalBody}</Modal.Body>
      {modalFooter && (
        <Modal.Footer>{modalFooter}</Modal.Footer>
      )}
    </Modal>
  );

  const classNames = cx({
    'btn btn-default btn-sm': isButton,
  });

  if (isButton) {
    const className =
      'modal-trigger ' +
      (customClass ? customClass : '');
    return (
      <>
        <Button
          bsSize={bsSize}
          className={className}
          tooltip={tooltip}
          onClick={open}
        >
          {triggerNode}
        </Button>
        {renderModal}
      </>
    );
  } else if (isMenuItem) {
    return (
      <>
        <MenuItem onClick={open}>{triggerNode}</MenuItem>
        {renderModal}
      </>
    );
  }
  /* eslint-disable jsx-a11y/interactive-supports-focus */
  return (
    <>
      <span className={classNames} onClick={open} role="button">
        {triggerNode}
      </span>
      {renderModal}
    </>
  );
})

export default ModalTrigger
